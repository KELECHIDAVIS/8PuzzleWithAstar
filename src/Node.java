import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;

public class Node implements Comparable<Node> {
    /*
    Class representing each node
    parent is preceding node generated by solver
    actions is action take to produce this puzzle, if any

     */
    int g , h;
    Puzzle puzzle ;
    Node parent;
    String action;
    public Node(Puzzle puzz, Node parent, String action)
    {
        this.puzzle = puzz;
        this.parent = parent;
        this.action = action ;
        if(parent!= null)
        {
            this.g = this.parent.g+1;
        }else
        {
            this.g =0;
        }

    }

    public int getF()
    {
        return this.g +this.h() ;
    }

    public String toString()
    {
        String string ="G: "+this.g+"\nH: "+this.h+"\n"+this.action+"\n";
        string+=this.puzzle.toString();
        return string;
    }
    public ArrayList<Node> getPath()
    {
        ArrayList<Node> path = new ArrayList<Node>();
        Node node = this;
        while(node.g!=0)
        {
            path.add(node);
            node = node.parent;
        }
        Collections.reverse(path);
        return path;

    }
    public boolean solved()
    {
        return this.puzzle.solved();
    }


    public ArrayList<String> actions()
    {
        return this.puzzle.actions();
    }
    public int h()
    {
        return this.puzzle.manhattan();
    }


    @Override
    public int compareTo(Node o) {
        return this.getF()-o.getF();
    }
}
